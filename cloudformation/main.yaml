AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Ollama LLM Platform - Complete Infrastructure with updated Lambda functions'

Parameters:
  Environment:
    Type: String
    Default: 'production'
    Description: 'Environment name for resource naming'
  
  DomainName:
    Type: String
    Default: 'example.com'
    Description: 'Base domain name for the platform (e.g., example.com)'
  
  SetupDNS:
    Type: String
    Description: 'Whether to automatically setup Route53 DNS records'
    Default: 'false'
    AllowedValues: ['true', 'false']
  
  AdminEmail:
    Type: String
    Description: 'Email address for the initial admin user'
    Default: 'admin@example.com'
  
  EnableMFA:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: 'Enable Multi-Factor Authentication'

Resources:
  # ECR Repository (integrated into main stack)
  OllamaRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub '${Environment}-ollama'
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 production images",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPrefixList": ["v", "latest", "stable"],
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 2,
                "description": "Delete untagged images older than 1 day",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 1
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'aws-ollama-platform'

  # Network Layer
  NetworkStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './network/vpc.yaml'
      Parameters:
        Environment: !Ref Environment
        DomainName: !Ref DomainName
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'aws-ollama-platform'
        - Key: Component
          Value: 'network'

  # Security Layer
  SecurityStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: NetworkStack
    Properties:
      TemplateURL: './security/iam.yaml'
      Parameters:
        Environment: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'aws-ollama-platform'
        - Key: Component
          Value: 'security'

  # Storage Layer
  StorageStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './storage/dynamodb.yaml'
      Parameters:
        Environment: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'aws-ollama-platform'
        - Key: Component
          Value: 'storage'

  # Authentication Layer
  AuthStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: './auth/cognito.yaml'
      Parameters:
        Environment: !Ref Environment
        DomainName: !Ref DomainName
        AdminEmail: !Ref AdminEmail
        EnableMFA: !Ref EnableMFA
        AdminTemporaryPassword: 'TempPass123!'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'aws-ollama-platform'
        - Key: Component
          Value: 'authentication'

  # Compute Layer
  ComputeStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: 
      - NetworkStack
      - SecurityStack
    Properties:
      TemplateURL: './compute/ecs-cluster.yaml'
      Parameters:
        Environment: !Ref Environment
        VPCId: !GetAtt NetworkStack.Outputs.VPCId
        PrivateSubnetIds: !GetAtt NetworkStack.Outputs.PrivateSubnetIds
        PublicSubnetIds: !GetAtt NetworkStack.Outputs.PublicSubnetIds
        VpcCidrBlock: !GetAtt NetworkStack.Outputs.VpcCidrBlock
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'aws-ollama-platform'
        - Key: Component
          Value: 'compute'

  # API Layer with updated Lambda functions
  APIStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: 
      - AuthStack
      - StorageStack
      - ComputeStack
    Properties:
      TemplateURL: './api/api-gateway.yaml'
      Parameters:
        Environment: !Ref Environment
        VPCId: !GetAtt NetworkStack.Outputs.VPCId
        PrivateSubnetIds: !GetAtt NetworkStack.Outputs.PrivateSubnetIds
        UserPoolId: !GetAtt AuthStack.Outputs.UserPoolId
        UserPoolClientId: !GetAtt AuthStack.Outputs.UserPoolClientId
        ModelsTableName: !GetAtt StorageStack.Outputs.ModelsTableName
        InstancesTableName: !GetAtt StorageStack.Outputs.InstancesTableName
        UsersTableName: !GetAtt StorageStack.Outputs.UsersTableName
        LambdaExecutionRole: !GetAtt SecurityStack.Outputs.LambdaExecutionRole
        ECSTaskRole: !GetAtt SecurityStack.Outputs.ECSTaskRole
        ECSExecutionRole: !GetAtt SecurityStack.Outputs.ECSExecutionRole
        APIGatewayCloudWatchRoleArn: !GetAtt SecurityStack.Outputs.APIGatewayCloudWatchRole
        # ECSÈñ¢ÈÄ£„ÅÆÊÉÖÂ†±„ÇíËøΩÂä†
        ECSClusterName: !GetAtt ComputeStack.Outputs.ECSClusterName
        ECSSecurityGroupId: !GetAtt ComputeStack.Outputs.ECSSecurityGroupId
        # ALBÈñ¢ÈÄ£„ÅÆÊÉÖÂ†±„ÇíËøΩÂä†
        ALBListenerArn: !GetAtt ComputeStack.Outputs.ALBListenerArn
        # ALBArn: !GetAtt ComputeStack.Outputs.LoadBalancerArn
        ALBDNSName: !GetAtt ComputeStack.Outputs.ApplicationLoadBalancerDNSName
        # ECR Repository URI from main stack
        OllamaRepositoryUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${OllamaRepository}'
        ECSGpuCapacityProvider: !GetAtt ComputeStack.Outputs.GpuCapacityProviderName
        GPUCount: '1'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'aws-ollama-platform'
        - Key: Component
          Value: 'api'

  # Frontend Layer
  FrontendStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: APIStack
    Properties:
      TemplateURL: './frontend/s3-cloudfront.yaml'
      Parameters:
        Environment: !Ref Environment
        DomainName: !Ref DomainName
        UserPoolId: !GetAtt AuthStack.Outputs.UserPoolId
        UserPoolClientId: !GetAtt AuthStack.Outputs.UserPoolClientId
        APIGatewayURL: !GetAtt APIStack.Outputs.APIGatewayURL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'aws-ollama-platform'
        - Key: Component
          Value: 'frontend'

Outputs:
  # ECR Repository Information
  OllamaRepositoryUri:
    Description: 'Universal Ollama ECR Repository URI'
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${OllamaRepository}'
    Export:
      Name: !Sub '${AWS::StackName}-OllamaRepositoryUri'

  OllamaRepositoryName:
    Description: 'Universal Ollama ECR Repository Name'
    Value: !Ref OllamaRepository
    Export:
      Name: !Sub '${AWS::StackName}-OllamaRepositoryName'

  # Application URLs
  CloudFrontURL:
    Description: 'CloudFront Distribution URL'
    Value: !GetAtt FrontendStack.Outputs.CloudFrontURL

  APIGatewayURL:
    Description: 'API Gateway URL'
    Value: !GetAtt APIStack.Outputs.APIGatewayURL

  # Authentication
  UserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !GetAtt AuthStack.Outputs.UserPoolId

  UserPoolClientId:
    Description: 'Cognito User Pool Client ID'
    Value: !GetAtt AuthStack.Outputs.UserPoolClientId

  # Infrastructure
  VPCId:
    Description: 'VPC ID'
    Value: !GetAtt NetworkStack.Outputs.VPCId

  ECSClusterName:
    Description: 'ECS Cluster Name'
    Value: !GetAtt ComputeStack.Outputs.ECSClusterName

  ApplicationLoadBalancerURL:
    Description: 'Application Load Balancer URL'
    Value: !GetAtt ComputeStack.Outputs.ApplicationLoadBalancerURL
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationLoadBalancerURL'

  FrontendS3BucketName:
    Description: 'Name of the S3 bucket for the frontend assets'
    Value: !GetAtt FrontendStack.Outputs.S3BucketName

  CloudFrontDistributionId:
    Description: 'ID of the CloudFront distribution for the frontend'
    Value: !GetAtt FrontendStack.Outputs.CloudFrontDistributionId

  # Setup Instructions
  SetupInstructions:
    Description: 'Setup instructions with updated Lambda functions'
    Value: !Sub |
      üöÄ AWS Ollama Platform Deployment Complete!
      
      üìã Updated Features:
      ‚Ä¢ Lambda functions now include Decimal handling fixes
      ‚Ä¢ Improved error handling and logging
      ‚Ä¢ Complete ECS integration for model deployment
      
      üîß Next Steps:
      1. Build and push Docker images:
         cd aws-ollama-llm-platform
         sh scripts/build-and-push-images.sh
      
      2. Populate model data:
         python3 scripts/populate-models.py
      
      3. Access the application: ${FrontendStack.Outputs.CloudFrontURL}
      
      4. Create admin user:
         aws cognito-idp admin-create-user \
           --user-pool-id ${AuthStack.Outputs.UserPoolId} \
           --username admin \
           --user-attributes Name=email,Value=${AdminEmail} \
           --temporary-password TempPass123! \
           --message-action SUPPRESS
      
      ‚ö†Ô∏è  Important Notes:
      ‚Ä¢ The Decimal serialization error has been fixed
      ‚Ä¢ Lambda functions are now embedded in CloudFormation templates
      ‚Ä¢ All API responses will correctly handle DynamoDB Decimal types
