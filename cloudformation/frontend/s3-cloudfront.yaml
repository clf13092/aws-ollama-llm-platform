AWSTemplateFormatVersion: '2010-09-09'
Description: 'Frontend layer for AWS Ollama Platform - S3 Static Website and CloudFront Distribution'

Parameters:
  Environment:
    Type: String
    Description: 'Environment name for resource naming'
  
  DomainName:
    Type: String
    Description: 'Domain name for the platform'
  
  CertificateArn:
    Type: String
    Description: 'SSL Certificate ARN for CloudFront (optional)'
    Default: ''
  
  UserPoolId:
    Type: String
    Description: 'Cognito User Pool ID for frontend configuration'
  
  UserPoolClientId:
    Type: String
    Description: 'Cognito User Pool Client ID for frontend configuration'
  
  APIGatewayURL:
    Type: String
    Description: 'API Gateway URL for backend communication'

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, '']]
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]
  IsProduction: !Equals [!Ref Environment, 'production']

Resources:
  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Environment}-ollama-frontend-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: !If [IsProduction, 'Enabled', 'Suspended']
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'aws-ollama-platform'

  # S3 Bucket for Access Logs (if needed)
  LoggingBucket:
    Type: AWS::S3::Bucket
    Condition: IsProduction
    Properties:
      BucketName: !Sub '${Environment}-ollama-access-logs-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: true
        IgnorePublicAcls: false
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteLogs
            Status: Enabled
            ExpirationInDays: 90
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'aws-ollama-platform'

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${Environment}-ollama-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
        Description: 'Origin Access Control for Ollama Frontend'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'AWS Ollama Platform - ${Environment}'
        Enabled: true
        DefaultRootObject: index.html
        PriceClass: !If [IsProduction, 'PriceClass_All', 'PriceClass_100']
        HttpVersion: http2
        IPV6Enabled: true
        
        # Custom domain configuration - 無効化
        # Aliases: !If 
        #   - HasCustomDomain
        #   - [!Ref DomainName]
        #   - !Ref AWS::NoValue
        
        # SSL Certificate - 無効化
        # ViewerCertificate: !If
        #   - HasCertificate
        #   - AcmCertificateArn: !Ref CertificateArn
        #     SslSupportMethod: sni-only
        #     MinimumProtocolVersion: TLSv1.2_2021
        #   - CloudFrontDefaultCertificate: true
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        
        # Origins
        Origins:
          - Id: s3-origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref OriginAccessControl
        
        # Default Cache Behavior
        DefaultCacheBehavior:
          TargetOriginId: s3-origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # CORS-S3Origin
          ResponseHeadersPolicyId: 5cc3b908-e619-4b99-88e5-2cf7f45965bd  # SimpleCORS
          Compress: true
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
        
        # Cache Behaviors for API routes
        CacheBehaviors:
          - PathPattern: '/static/*'
            TargetOriginId: s3-origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # CachingOptimizedForUncompressedObjects
            Compress: true
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
          
          - PathPattern: '/assets/*'
            TargetOriginId: s3-origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # CachingOptimizedForUncompressedObjects
            Compress: true
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
        
        # Custom Error Pages
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: '/index.html'
            ErrorCachingMinTTL: 0
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/index.html'
            ErrorCachingMinTTL: 0
        
        # Logging - 無効化
        # Logging: !If
        #   - IsProduction
        #   - Bucket: !GetAtt LoggingBucket.DomainName
        #     Prefix: 'cloudfront-logs/'
        #     IncludeCookies: false
        #   - !Ref AWS::NoValue
        
        # Geographic restrictions
        Restrictions:
          GeoRestriction:
            RestrictionType: none
      
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: 'aws-ollama-platform'

  # S3 Bucket Policy for CloudFront
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${FrontendBucket}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  

  # CloudWatch Dashboard for monitoring
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: IsProduction
    Properties:
      DashboardName: !Sub '${Environment}-ollama-frontend-dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CloudFront", "Requests", "DistributionId", "${CloudFrontDistribution}" ],
                  [ ".", "BytesDownloaded", ".", "." ],
                  [ ".", "BytesUploaded", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "us-east-1",
                "title": "CloudFront Metrics"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CloudFront", "4xxErrorRate", "DistributionId", "${CloudFrontDistribution}" ],
                  [ ".", "5xxErrorRate", ".", "." ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "us-east-1",
                "title": "CloudFront Error Rates"
              }
            }
          ]
        }

Outputs:
  CloudFrontURL:
    Description: 'CloudFront distribution URL'
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontURL'

  CloudFrontDistributionId:
    Description: 'CloudFront distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  S3BucketName:
    Description: 'S3 bucket name for frontend'
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketName'

  S3BucketArn:
    Description: 'S3 bucket ARN for frontend'
    Value: !GetAtt FrontendBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketArn'

  S3BucketDomainName:
    Description: 'S3 bucket domain name'
    Value: !GetAtt FrontendBucket.RegionalDomainName
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketDomainName'

  CustomDomainURL:
    Condition: HasCustomDomain
    Description: 'Custom domain URL'
    Value: !Sub 'https://${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CustomDomainURL'

  FrontendConfiguration:
    Description: 'Frontend configuration for React app'
    Value: !Sub |
      {
        "userPoolId": "${UserPoolId}",
        "userPoolClientId": "${UserPoolClientId}",
        "apiGatewayUrl": "${APIGatewayURL}",
        "cloudfrontDomain": "${CloudFrontDistribution.DomainName}",
        "environment": "${Environment}",
        "region": "${AWS::Region}"
      }
    Export:
      Name: !Sub '${AWS::StackName}-FrontendConfiguration'
